@using Microsoft.JSInterop;
@implements IAsyncDisposable;

<MudPaper Class="pa-4 mb-1">
    @if (Conversation.MessageCount > 0)
    {
        <MudGrid>
            <MudItem xs="12" Style="height: 55vh; overflow: scroll;">
                    <MudTimeline TimelinePosition="TimelinePosition.Start">
                        @{
                            RenderFragment caseyDot = @<MudImage Src="caisy.png" Height="30" />;
                        }
                        @foreach (var message in Conversation.Messages)
                        {
                            var color = message.IsUserMessage ? Color.Dark : Color.Primary;
                            RenderFragment dot = message.IsUserMessage
                                    ? @<MudIcon Icon=@Icons.Material.Outlined.Person></MudIcon>
                                    : caseyDot;

                            <MudTimelineItem Color="color" Size="Size.Large" Elevation="0">
                                <ItemDot>
                                    @dot
                                </ItemDot>
                                <ItemContent>
                                    <MudAlert Severity="Severity.Normal" NoIcon=true Class="alert-code-block message">
                                    @if(message.Content is not null)
                                    {
                                        <MudMarkdown Value="@message.Content" CodeBlockTheme="User.CodeBlockTheme" />
                                    }
                                    </MudAlert>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                        @if (Loading)
                        {
                            <MudTimelineItem Color="Color.Primary" Size="Size.Large" Elevation="0">
                                <ItemDot>
                                    @caseyDot
                                </ItemDot>
                                <ItemContent>
                                    <MudSkeleton Height="200px" Width="100%"></MudSkeleton>
                                </ItemContent>
                            </MudTimelineItem>
                        }
                    </MudTimeline>            
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-center">
                <MudImage Src="caisy.png" Style="width: 100%; height: 100%; max-width: 450px;" />
            </MudItem>
        </MudGrid>
    }
</MudPaper>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;
    [CascadingParameter] public IUser User { get; set; } = null!;
    [Parameter, EditorRequired] public ConversationBase Conversation { get; set; } = null!;
    [Parameter, EditorRequired] public bool Loading { get; set; }

    private IJSObjectReference? chatWindowModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            chatWindowModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", $"./Features/Shared/Components/{nameof(ChatWindow)}.razor.js");
        }

        if (chatWindowModule is not null && Conversation.MessageCount > 0)
        {
            await chatWindowModule.InvokeVoidAsync("focusLastMessage");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if(chatWindowModule is not null)
        {
            await chatWindowModule.DisposeAsync();
        }
    }
}
